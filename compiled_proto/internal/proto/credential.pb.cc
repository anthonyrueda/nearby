// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/proto/credential.proto

#include "internal/proto/credential.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace nearby {
namespace internal {
PROTOBUF_CONSTEXPR PrivateCredential_ConsumedSaltsEntry_DoNotUse::PrivateCredential_ConsumedSaltsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PrivateCredential_ConsumedSaltsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivateCredential_ConsumedSaltsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivateCredential_ConsumedSaltsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PrivateCredential_ConsumedSaltsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivateCredential_ConsumedSaltsEntry_DoNotUseDefaultTypeInternal _PrivateCredential_ConsumedSaltsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PrivateCredential::PrivateCredential(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.consumed_salts_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.secret_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.authenticity_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verification_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_encryption_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_metadata_)*/nullptr
  , /*decltype(_impl_.start_time_millis_)*/uint64_t{0u}
  , /*decltype(_impl_.end_time_millis_)*/uint64_t{0u}
  , /*decltype(_impl_.identity_type_)*/0} {}
struct PrivateCredentialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivateCredentialDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivateCredentialDefaultTypeInternal() {}
  union {
    PrivateCredential _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivateCredentialDefaultTypeInternal _PrivateCredential_default_instance_;
PROTOBUF_CONSTEXPR PublicCredential::PublicCredential(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.secret_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.authenticity_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verification_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encrypted_metadata_bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_encryption_key_tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_time_millis_)*/uint64_t{0u}
  , /*decltype(_impl_.end_time_millis_)*/uint64_t{0u}
  , /*decltype(_impl_.identity_type_)*/0} {}
struct PublicCredentialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublicCredentialDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublicCredentialDefaultTypeInternal() {}
  union {
    PublicCredential _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublicCredentialDefaultTypeInternal _PublicCredential_default_instance_;
}  // namespace internal
}  // namespace nearby
static ::_pb::Metadata file_level_metadata_internal_2fproto_2fcredential_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_internal_2fproto_2fcredential_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_internal_2fproto_2fcredential_2eproto = nullptr;

const uint32_t TableStruct_internal_2fproto_2fcredential_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PrivateCredential_ConsumedSaltsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PrivateCredential_ConsumedSaltsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PrivateCredential_ConsumedSaltsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PrivateCredential_ConsumedSaltsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PrivateCredential, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PrivateCredential, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PrivateCredential, _impl_.identity_type_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PrivateCredential, _impl_.secret_id_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PrivateCredential, _impl_.authenticity_key_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PrivateCredential, _impl_.verification_key_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PrivateCredential, _impl_.start_time_millis_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PrivateCredential, _impl_.end_time_millis_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PrivateCredential, _impl_.consumed_salts_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PrivateCredential, _impl_.metadata_encryption_key_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PrivateCredential, _impl_.device_metadata_),
  7,
  0,
  1,
  2,
  5,
  6,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PublicCredential, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PublicCredential, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PublicCredential, _impl_.identity_type_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PublicCredential, _impl_.secret_id_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PublicCredential, _impl_.authenticity_key_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PublicCredential, _impl_.verification_key_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PublicCredential, _impl_.start_time_millis_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PublicCredential, _impl_.end_time_millis_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PublicCredential, _impl_.encrypted_metadata_bytes_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::PublicCredential, _impl_.metadata_encryption_key_tag_),
  7,
  0,
  1,
  2,
  5,
  6,
  3,
  4,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::nearby::internal::PrivateCredential_ConsumedSaltsEntry_DoNotUse)},
  { 10, 25, -1, sizeof(::nearby::internal::PrivateCredential)},
  { 34, 48, -1, sizeof(::nearby::internal::PublicCredential)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::nearby::internal::_PrivateCredential_ConsumedSaltsEntry_DoNotUse_default_instance_._instance,
  &::nearby::internal::_PrivateCredential_default_instance_._instance,
  &::nearby::internal::_PublicCredential_default_instance_._instance,
};

const char descriptor_table_protodef_internal_2fproto_2fcredential_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037internal/proto/credential.proto\022\017nearb"
  "y.internal\032$internal/proto/device_metada"
  "ta.proto\"\360\004\n\021PrivateCredential\0229\n\ridenti"
  "ty_type\030\001 \001(\0162\035.nearby.internal.Identity"
  "TypeH\000\210\001\001\022\026\n\tsecret_id\030\002 \001(\014H\001\210\001\001\022\035\n\020aut"
  "henticity_key\030\003 \001(\014H\002\210\001\001\022\035\n\020verification"
  "_key\030\004 \001(\014H\003\210\001\001\022\036\n\021start_time_millis\030\005 \001"
  "(\004H\004\210\001\001\022\034\n\017end_time_millis\030\006 \001(\004H\005\210\001\001\022M\n"
  "\016consumed_salts\030\007 \003(\01325.nearby.internal."
  "PrivateCredential.ConsumedSaltsEntry\022$\n\027"
  "metadata_encryption_key\030\010 \001(\014H\006\210\001\001\022=\n\017de"
  "vice_metadata\030\t \001(\0132\037.nearby.internal.De"
  "viceMetadataH\007\210\001\001\0324\n\022ConsumedSaltsEntry\022"
  "\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\010:\0028\001B\020\n\016_iden"
  "tity_typeB\014\n\n_secret_idB\023\n\021_authenticity"
  "_keyB\023\n\021_verification_keyB\024\n\022_start_time"
  "_millisB\022\n\020_end_time_millisB\032\n\030_metadata"
  "_encryption_keyB\022\n\020_device_metadata\"\343\003\n\020"
  "PublicCredential\0229\n\ridentity_type\030\001 \001(\0162"
  "\035.nearby.internal.IdentityTypeH\000\210\001\001\022\026\n\ts"
  "ecret_id\030\002 \001(\014H\001\210\001\001\022\035\n\020authenticity_key\030"
  "\003 \001(\014H\002\210\001\001\022\035\n\020verification_key\030\004 \001(\014H\003\210\001"
  "\001\022\036\n\021start_time_millis\030\005 \001(\004H\004\210\001\001\022\034\n\017end"
  "_time_millis\030\006 \001(\004H\005\210\001\001\022%\n\030encrypted_met"
  "adata_bytes\030\007 \001(\014H\006\210\001\001\022(\n\033metadata_encry"
  "ption_key_tag\030\010 \001(\014H\007\210\001\001B\020\n\016_identity_ty"
  "peB\014\n\n_secret_idB\023\n\021_authenticity_keyB\023\n"
  "\021_verification_keyB\024\n\022_start_time_millis"
  "B\022\n\020_end_time_millisB\033\n\031_encrypted_metad"
  "ata_bytesB\036\n\034_metadata_encryption_key_ta"
  "g*\234\001\n\014IdentityType\022\035\n\031IDENTITY_TYPE_UNSP"
  "ECIFIED\020\000\022\031\n\025IDENTITY_TYPE_PRIVATE\020\001\022\031\n\025"
  "IDENTITY_TYPE_TRUSTED\020\002\022\030\n\024IDENTITY_TYPE"
  "_PUBLIC\020\003\022\035\n\031IDENTITY_TYPE_PROVISIONED\020\004"
  "B\034\n\032com.google.nearby.presenceb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_internal_2fproto_2fcredential_2eproto_deps[1] = {
  &::descriptor_table_internal_2fproto_2fdevice_5fmetadata_2eproto,
};
static ::_pbi::once_flag descriptor_table_internal_2fproto_2fcredential_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_internal_2fproto_2fcredential_2eproto = {
    false, false, 1398, descriptor_table_protodef_internal_2fproto_2fcredential_2eproto,
    "internal/proto/credential.proto",
    &descriptor_table_internal_2fproto_2fcredential_2eproto_once, descriptor_table_internal_2fproto_2fcredential_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_internal_2fproto_2fcredential_2eproto::offsets,
    file_level_metadata_internal_2fproto_2fcredential_2eproto, file_level_enum_descriptors_internal_2fproto_2fcredential_2eproto,
    file_level_service_descriptors_internal_2fproto_2fcredential_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_internal_2fproto_2fcredential_2eproto_getter() {
  return &descriptor_table_internal_2fproto_2fcredential_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_internal_2fproto_2fcredential_2eproto(&descriptor_table_internal_2fproto_2fcredential_2eproto);
namespace nearby {
namespace internal {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IdentityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_internal_2fproto_2fcredential_2eproto);
  return file_level_enum_descriptors_internal_2fproto_2fcredential_2eproto[0];
}
bool IdentityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

PrivateCredential_ConsumedSaltsEntry_DoNotUse::PrivateCredential_ConsumedSaltsEntry_DoNotUse() {}
PrivateCredential_ConsumedSaltsEntry_DoNotUse::PrivateCredential_ConsumedSaltsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PrivateCredential_ConsumedSaltsEntry_DoNotUse::MergeFrom(const PrivateCredential_ConsumedSaltsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PrivateCredential_ConsumedSaltsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2fproto_2fcredential_2eproto_getter, &descriptor_table_internal_2fproto_2fcredential_2eproto_once,
      file_level_metadata_internal_2fproto_2fcredential_2eproto[0]);
}

// ===================================================================

class PrivateCredential::_Internal {
 public:
  using HasBits = decltype(std::declval<PrivateCredential>()._impl_._has_bits_);
  static void set_has_identity_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_secret_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_authenticity_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_verification_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_time_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_end_time_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_metadata_encryption_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::nearby::internal::DeviceMetadata& device_metadata(const PrivateCredential* msg);
  static void set_has_device_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::nearby::internal::DeviceMetadata&
PrivateCredential::_Internal::device_metadata(const PrivateCredential* msg) {
  return *msg->_impl_.device_metadata_;
}
void PrivateCredential::clear_device_metadata() {
  if (_impl_.device_metadata_ != nullptr) _impl_.device_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
PrivateCredential::PrivateCredential(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PrivateCredential::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:nearby.internal.PrivateCredential)
}
PrivateCredential::PrivateCredential(const PrivateCredential& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrivateCredential* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.consumed_salts_)*/{}
    , decltype(_impl_.secret_id_){}
    , decltype(_impl_.authenticity_key_){}
    , decltype(_impl_.verification_key_){}
    , decltype(_impl_.metadata_encryption_key_){}
    , decltype(_impl_.device_metadata_){nullptr}
    , decltype(_impl_.start_time_millis_){}
    , decltype(_impl_.end_time_millis_){}
    , decltype(_impl_.identity_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.consumed_salts_.MergeFrom(from._impl_.consumed_salts_);
  _impl_.secret_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_secret_id()) {
    _this->_impl_.secret_id_.Set(from._internal_secret_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.authenticity_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authenticity_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_authenticity_key()) {
    _this->_impl_.authenticity_key_.Set(from._internal_authenticity_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verification_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verification_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_verification_key()) {
    _this->_impl_.verification_key_.Set(from._internal_verification_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_encryption_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_encryption_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_metadata_encryption_key()) {
    _this->_impl_.metadata_encryption_key_.Set(from._internal_metadata_encryption_key(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_device_metadata()) {
    _this->_impl_.device_metadata_ = new ::nearby::internal::DeviceMetadata(*from._impl_.device_metadata_);
  }
  ::memcpy(&_impl_.start_time_millis_, &from._impl_.start_time_millis_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.identity_type_) -
    reinterpret_cast<char*>(&_impl_.start_time_millis_)) + sizeof(_impl_.identity_type_));
  // @@protoc_insertion_point(copy_constructor:nearby.internal.PrivateCredential)
}

inline void PrivateCredential::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.consumed_salts_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.secret_id_){}
    , decltype(_impl_.authenticity_key_){}
    , decltype(_impl_.verification_key_){}
    , decltype(_impl_.metadata_encryption_key_){}
    , decltype(_impl_.device_metadata_){nullptr}
    , decltype(_impl_.start_time_millis_){uint64_t{0u}}
    , decltype(_impl_.end_time_millis_){uint64_t{0u}}
    , decltype(_impl_.identity_type_){0}
  };
  _impl_.secret_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.authenticity_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authenticity_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verification_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verification_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_encryption_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_encryption_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrivateCredential::~PrivateCredential() {
  // @@protoc_insertion_point(destructor:nearby.internal.PrivateCredential)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PrivateCredential::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.consumed_salts_.Destruct();
  _impl_.consumed_salts_.~MapField();
  _impl_.secret_id_.Destroy();
  _impl_.authenticity_key_.Destroy();
  _impl_.verification_key_.Destroy();
  _impl_.metadata_encryption_key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.device_metadata_;
}

void PrivateCredential::ArenaDtor(void* object) {
  PrivateCredential* _this = reinterpret_cast< PrivateCredential* >(object);
  _this->_impl_.consumed_salts_.Destruct();
}
void PrivateCredential::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrivateCredential::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.internal.PrivateCredential)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.consumed_salts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.secret_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.authenticity_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.verification_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.metadata_encryption_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.device_metadata_ != nullptr);
      _impl_.device_metadata_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.start_time_millis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.identity_type_) -
        reinterpret_cast<char*>(&_impl_.start_time_millis_)) + sizeof(_impl_.identity_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrivateCredential::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .nearby.internal.IdentityType identity_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_identity_type(static_cast<::nearby::internal::IdentityType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional bytes secret_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secret_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes authenticity_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_authenticity_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes verification_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_verification_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 start_time_millis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_start_time_millis(&has_bits);
          _impl_.start_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 end_time_millis = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_end_time_millis(&has_bits);
          _impl_.end_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, bool> consumed_salts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.consumed_salts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes metadata_encryption_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_metadata_encryption_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.internal.DeviceMetadata device_metadata = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivateCredential::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.internal.PrivateCredential)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .nearby.internal.IdentityType identity_type = 1;
  if (_internal_has_identity_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_identity_type(), target);
  }

  // optional bytes secret_id = 2;
  if (_internal_has_secret_id()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_secret_id(), target);
  }

  // optional bytes authenticity_key = 3;
  if (_internal_has_authenticity_key()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_authenticity_key(), target);
  }

  // optional bytes verification_key = 4;
  if (_internal_has_verification_key()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_verification_key(), target);
  }

  // optional uint64 start_time_millis = 5;
  if (_internal_has_start_time_millis()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_start_time_millis(), target);
  }

  // optional uint64 end_time_millis = 6;
  if (_internal_has_end_time_millis()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_end_time_millis(), target);
  }

  // map<uint32, bool> consumed_salts = 7;
  if (!this->_internal_consumed_salts().empty()) {
    using MapType = ::_pb::Map<uint32_t, bool>;
    using WireHelper = PrivateCredential_ConsumedSaltsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_consumed_salts();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    }
  }

  // optional bytes metadata_encryption_key = 8;
  if (_internal_has_metadata_encryption_key()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_metadata_encryption_key(), target);
  }

  // optional .nearby.internal.DeviceMetadata device_metadata = 9;
  if (_internal_has_device_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::device_metadata(this),
        _Internal::device_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.internal.PrivateCredential)
  return target;
}

size_t PrivateCredential::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.internal.PrivateCredential)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, bool> consumed_salts = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_consumed_salts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >::const_iterator
      it = this->_internal_consumed_salts().begin();
      it != this->_internal_consumed_salts().end(); ++it) {
    total_size += PrivateCredential_ConsumedSaltsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes secret_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_secret_id());
    }

    // optional bytes authenticity_key = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_authenticity_key());
    }

    // optional bytes verification_key = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_verification_key());
    }

    // optional bytes metadata_encryption_key = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_metadata_encryption_key());
    }

    // optional .nearby.internal.DeviceMetadata device_metadata = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.device_metadata_);
    }

    // optional uint64 start_time_millis = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start_time_millis());
    }

    // optional uint64 end_time_millis = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_end_time_millis());
    }

    // optional .nearby.internal.IdentityType identity_type = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_identity_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrivateCredential::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrivateCredential::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrivateCredential::GetClassData() const { return &_class_data_; }


void PrivateCredential::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrivateCredential*>(&to_msg);
  auto& from = static_cast<const PrivateCredential&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.internal.PrivateCredential)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.consumed_salts_.MergeFrom(from._impl_.consumed_salts_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_secret_id(from._internal_secret_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_authenticity_key(from._internal_authenticity_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_verification_key(from._internal_verification_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_metadata_encryption_key(from._internal_metadata_encryption_key());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_device_metadata()->::nearby::internal::DeviceMetadata::MergeFrom(
          from._internal_device_metadata());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.start_time_millis_ = from._impl_.start_time_millis_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.end_time_millis_ = from._impl_.end_time_millis_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.identity_type_ = from._impl_.identity_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrivateCredential::CopyFrom(const PrivateCredential& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.internal.PrivateCredential)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateCredential::IsInitialized() const {
  return true;
}

void PrivateCredential::InternalSwap(PrivateCredential* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.consumed_salts_.InternalSwap(&other->_impl_.consumed_salts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secret_id_, lhs_arena,
      &other->_impl_.secret_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.authenticity_key_, lhs_arena,
      &other->_impl_.authenticity_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verification_key_, lhs_arena,
      &other->_impl_.verification_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_encryption_key_, lhs_arena,
      &other->_impl_.metadata_encryption_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrivateCredential, _impl_.identity_type_)
      + sizeof(PrivateCredential::_impl_.identity_type_)
      - PROTOBUF_FIELD_OFFSET(PrivateCredential, _impl_.device_metadata_)>(
          reinterpret_cast<char*>(&_impl_.device_metadata_),
          reinterpret_cast<char*>(&other->_impl_.device_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivateCredential::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2fproto_2fcredential_2eproto_getter, &descriptor_table_internal_2fproto_2fcredential_2eproto_once,
      file_level_metadata_internal_2fproto_2fcredential_2eproto[1]);
}

// ===================================================================

class PublicCredential::_Internal {
 public:
  using HasBits = decltype(std::declval<PublicCredential>()._impl_._has_bits_);
  static void set_has_identity_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_secret_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_authenticity_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_verification_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_time_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_end_time_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_encrypted_metadata_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_metadata_encryption_key_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PublicCredential::PublicCredential(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:nearby.internal.PublicCredential)
}
PublicCredential::PublicCredential(const PublicCredential& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublicCredential* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.secret_id_){}
    , decltype(_impl_.authenticity_key_){}
    , decltype(_impl_.verification_key_){}
    , decltype(_impl_.encrypted_metadata_bytes_){}
    , decltype(_impl_.metadata_encryption_key_tag_){}
    , decltype(_impl_.start_time_millis_){}
    , decltype(_impl_.end_time_millis_){}
    , decltype(_impl_.identity_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.secret_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_secret_id()) {
    _this->_impl_.secret_id_.Set(from._internal_secret_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.authenticity_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authenticity_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_authenticity_key()) {
    _this->_impl_.authenticity_key_.Set(from._internal_authenticity_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verification_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verification_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_verification_key()) {
    _this->_impl_.verification_key_.Set(from._internal_verification_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encrypted_metadata_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_metadata_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encrypted_metadata_bytes()) {
    _this->_impl_.encrypted_metadata_bytes_.Set(from._internal_encrypted_metadata_bytes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_encryption_key_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_encryption_key_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_metadata_encryption_key_tag()) {
    _this->_impl_.metadata_encryption_key_tag_.Set(from._internal_metadata_encryption_key_tag(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_time_millis_, &from._impl_.start_time_millis_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.identity_type_) -
    reinterpret_cast<char*>(&_impl_.start_time_millis_)) + sizeof(_impl_.identity_type_));
  // @@protoc_insertion_point(copy_constructor:nearby.internal.PublicCredential)
}

inline void PublicCredential::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.secret_id_){}
    , decltype(_impl_.authenticity_key_){}
    , decltype(_impl_.verification_key_){}
    , decltype(_impl_.encrypted_metadata_bytes_){}
    , decltype(_impl_.metadata_encryption_key_tag_){}
    , decltype(_impl_.start_time_millis_){uint64_t{0u}}
    , decltype(_impl_.end_time_millis_){uint64_t{0u}}
    , decltype(_impl_.identity_type_){0}
  };
  _impl_.secret_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.authenticity_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authenticity_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verification_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verification_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encrypted_metadata_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_metadata_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_encryption_key_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_encryption_key_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublicCredential::~PublicCredential() {
  // @@protoc_insertion_point(destructor:nearby.internal.PublicCredential)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublicCredential::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.secret_id_.Destroy();
  _impl_.authenticity_key_.Destroy();
  _impl_.verification_key_.Destroy();
  _impl_.encrypted_metadata_bytes_.Destroy();
  _impl_.metadata_encryption_key_tag_.Destroy();
}

void PublicCredential::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublicCredential::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.internal.PublicCredential)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.secret_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.authenticity_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.verification_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.encrypted_metadata_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.metadata_encryption_key_tag_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.start_time_millis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.identity_type_) -
        reinterpret_cast<char*>(&_impl_.start_time_millis_)) + sizeof(_impl_.identity_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicCredential::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .nearby.internal.IdentityType identity_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_identity_type(static_cast<::nearby::internal::IdentityType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional bytes secret_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secret_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes authenticity_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_authenticity_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes verification_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_verification_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 start_time_millis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_start_time_millis(&has_bits);
          _impl_.start_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 end_time_millis = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_end_time_millis(&has_bits);
          _impl_.end_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes encrypted_metadata_bytes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_encrypted_metadata_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes metadata_encryption_key_tag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_metadata_encryption_key_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublicCredential::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.internal.PublicCredential)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .nearby.internal.IdentityType identity_type = 1;
  if (_internal_has_identity_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_identity_type(), target);
  }

  // optional bytes secret_id = 2;
  if (_internal_has_secret_id()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_secret_id(), target);
  }

  // optional bytes authenticity_key = 3;
  if (_internal_has_authenticity_key()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_authenticity_key(), target);
  }

  // optional bytes verification_key = 4;
  if (_internal_has_verification_key()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_verification_key(), target);
  }

  // optional uint64 start_time_millis = 5;
  if (_internal_has_start_time_millis()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_start_time_millis(), target);
  }

  // optional uint64 end_time_millis = 6;
  if (_internal_has_end_time_millis()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_end_time_millis(), target);
  }

  // optional bytes encrypted_metadata_bytes = 7;
  if (_internal_has_encrypted_metadata_bytes()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_encrypted_metadata_bytes(), target);
  }

  // optional bytes metadata_encryption_key_tag = 8;
  if (_internal_has_metadata_encryption_key_tag()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_metadata_encryption_key_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.internal.PublicCredential)
  return target;
}

size_t PublicCredential::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.internal.PublicCredential)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes secret_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_secret_id());
    }

    // optional bytes authenticity_key = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_authenticity_key());
    }

    // optional bytes verification_key = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_verification_key());
    }

    // optional bytes encrypted_metadata_bytes = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_encrypted_metadata_bytes());
    }

    // optional bytes metadata_encryption_key_tag = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_metadata_encryption_key_tag());
    }

    // optional uint64 start_time_millis = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start_time_millis());
    }

    // optional uint64 end_time_millis = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_end_time_millis());
    }

    // optional .nearby.internal.IdentityType identity_type = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_identity_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublicCredential::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublicCredential::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublicCredential::GetClassData() const { return &_class_data_; }


void PublicCredential::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublicCredential*>(&to_msg);
  auto& from = static_cast<const PublicCredential&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.internal.PublicCredential)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_secret_id(from._internal_secret_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_authenticity_key(from._internal_authenticity_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_verification_key(from._internal_verification_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_encrypted_metadata_bytes(from._internal_encrypted_metadata_bytes());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_metadata_encryption_key_tag(from._internal_metadata_encryption_key_tag());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.start_time_millis_ = from._impl_.start_time_millis_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.end_time_millis_ = from._impl_.end_time_millis_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.identity_type_ = from._impl_.identity_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublicCredential::CopyFrom(const PublicCredential& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.internal.PublicCredential)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicCredential::IsInitialized() const {
  return true;
}

void PublicCredential::InternalSwap(PublicCredential* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secret_id_, lhs_arena,
      &other->_impl_.secret_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.authenticity_key_, lhs_arena,
      &other->_impl_.authenticity_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verification_key_, lhs_arena,
      &other->_impl_.verification_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encrypted_metadata_bytes_, lhs_arena,
      &other->_impl_.encrypted_metadata_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_encryption_key_tag_, lhs_arena,
      &other->_impl_.metadata_encryption_key_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublicCredential, _impl_.identity_type_)
      + sizeof(PublicCredential::_impl_.identity_type_)
      - PROTOBUF_FIELD_OFFSET(PublicCredential, _impl_.start_time_millis_)>(
          reinterpret_cast<char*>(&_impl_.start_time_millis_),
          reinterpret_cast<char*>(&other->_impl_.start_time_millis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicCredential::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2fproto_2fcredential_2eproto_getter, &descriptor_table_internal_2fproto_2fcredential_2eproto_once,
      file_level_metadata_internal_2fproto_2fcredential_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nearby::internal::PrivateCredential_ConsumedSaltsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::nearby::internal::PrivateCredential_ConsumedSaltsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::internal::PrivateCredential_ConsumedSaltsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::internal::PrivateCredential*
Arena::CreateMaybeMessage< ::nearby::internal::PrivateCredential >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::internal::PrivateCredential >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::internal::PublicCredential*
Arena::CreateMaybeMessage< ::nearby::internal::PublicCredential >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::internal::PublicCredential >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
