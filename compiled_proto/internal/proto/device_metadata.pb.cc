// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/proto/device_metadata.proto

#include "internal/proto/device_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace nearby {
namespace internal {
PROTOBUF_CONSTEXPR DeviceMetadata::DeviceMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stable_device_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.icon_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bluetooth_mac_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_type_)*/0} {}
struct DeviceMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMetadataDefaultTypeInternal() {}
  union {
    DeviceMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMetadataDefaultTypeInternal _DeviceMetadata_default_instance_;
}  // namespace internal
}  // namespace nearby
static ::_pb::Metadata file_level_metadata_internal_2fproto_2fdevice_5fmetadata_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_internal_2fproto_2fdevice_5fmetadata_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_internal_2fproto_2fdevice_5fmetadata_2eproto = nullptr;

const uint32_t TableStruct_internal_2fproto_2fdevice_5fmetadata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::nearby::internal::DeviceMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::DeviceMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nearby::internal::DeviceMetadata, _impl_.stable_device_id_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::DeviceMetadata, _impl_.account_name_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::DeviceMetadata, _impl_.device_name_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::DeviceMetadata, _impl_.icon_url_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::DeviceMetadata, _impl_.bluetooth_mac_address_),
  PROTOBUF_FIELD_OFFSET(::nearby::internal::DeviceMetadata, _impl_.device_type_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::nearby::internal::DeviceMetadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::nearby::internal::_DeviceMetadata_default_instance_._instance,
};

const char descriptor_table_protodef_internal_2fproto_2fdevice_5fmetadata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$internal/proto/device_metadata.proto\022\017"
  "nearby.internal\"\264\003\n\016DeviceMetadata\022\035\n\020st"
  "able_device_id\030\001 \001(\tH\000\210\001\001\022\031\n\014account_nam"
  "e\030\002 \001(\tH\001\210\001\001\022\030\n\013device_name\030\003 \001(\tH\002\210\001\001\022\025"
  "\n\010icon_url\030\004 \001(\tH\003\210\001\001\022\"\n\025bluetooth_mac_a"
  "ddress\030\005 \001(\tH\004\210\001\001\022D\n\013device_type\030\006 \001(\0162*"
  ".nearby.internal.DeviceMetadata.DeviceTy"
  "peH\005\210\001\001\"`\n\nDeviceType\022\017\n\013UNSPECIFIED\020\000\022\t"
  "\n\005PHONE\020\001\022\n\n\006TABLET\020\002\022\013\n\007DISPLAY\020\003\022\n\n\006LA"
  "PTOP\020\004\022\006\n\002TV\020\005\022\t\n\005WATCH\020\006B\023\n\021_stable_dev"
  "ice_idB\017\n\r_account_nameB\016\n\014_device_nameB"
  "\013\n\t_icon_urlB\030\n\026_bluetooth_mac_addressB\016"
  "\n\014_device_typeb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_internal_2fproto_2fdevice_5fmetadata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_internal_2fproto_2fdevice_5fmetadata_2eproto = {
    false, false, 502, descriptor_table_protodef_internal_2fproto_2fdevice_5fmetadata_2eproto,
    "internal/proto/device_metadata.proto",
    &descriptor_table_internal_2fproto_2fdevice_5fmetadata_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_internal_2fproto_2fdevice_5fmetadata_2eproto::offsets,
    file_level_metadata_internal_2fproto_2fdevice_5fmetadata_2eproto, file_level_enum_descriptors_internal_2fproto_2fdevice_5fmetadata_2eproto,
    file_level_service_descriptors_internal_2fproto_2fdevice_5fmetadata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_internal_2fproto_2fdevice_5fmetadata_2eproto_getter() {
  return &descriptor_table_internal_2fproto_2fdevice_5fmetadata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_internal_2fproto_2fdevice_5fmetadata_2eproto(&descriptor_table_internal_2fproto_2fdevice_5fmetadata_2eproto);
namespace nearby {
namespace internal {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceMetadata_DeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_internal_2fproto_2fdevice_5fmetadata_2eproto);
  return file_level_enum_descriptors_internal_2fproto_2fdevice_5fmetadata_2eproto[0];
}
bool DeviceMetadata_DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DeviceMetadata_DeviceType DeviceMetadata::UNSPECIFIED;
constexpr DeviceMetadata_DeviceType DeviceMetadata::PHONE;
constexpr DeviceMetadata_DeviceType DeviceMetadata::TABLET;
constexpr DeviceMetadata_DeviceType DeviceMetadata::DISPLAY;
constexpr DeviceMetadata_DeviceType DeviceMetadata::LAPTOP;
constexpr DeviceMetadata_DeviceType DeviceMetadata::TV;
constexpr DeviceMetadata_DeviceType DeviceMetadata::WATCH;
constexpr DeviceMetadata_DeviceType DeviceMetadata::DeviceType_MIN;
constexpr DeviceMetadata_DeviceType DeviceMetadata::DeviceType_MAX;
constexpr int DeviceMetadata::DeviceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DeviceMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceMetadata>()._impl_._has_bits_);
  static void set_has_stable_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_icon_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bluetooth_mac_address(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_device_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

DeviceMetadata::DeviceMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:nearby.internal.DeviceMetadata)
}
DeviceMetadata::DeviceMetadata(const DeviceMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stable_device_id_){}
    , decltype(_impl_.account_name_){}
    , decltype(_impl_.device_name_){}
    , decltype(_impl_.icon_url_){}
    , decltype(_impl_.bluetooth_mac_address_){}
    , decltype(_impl_.device_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stable_device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stable_device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stable_device_id()) {
    _this->_impl_.stable_device_id_.Set(from._internal_stable_device_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_name()) {
    _this->_impl_.account_name_.Set(from._internal_account_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_name()) {
    _this->_impl_.device_name_.Set(from._internal_device_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.icon_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.icon_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon_url()) {
    _this->_impl_.icon_url_.Set(from._internal_icon_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bluetooth_mac_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bluetooth_mac_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bluetooth_mac_address()) {
    _this->_impl_.bluetooth_mac_address_.Set(from._internal_bluetooth_mac_address(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.device_type_ = from._impl_.device_type_;
  // @@protoc_insertion_point(copy_constructor:nearby.internal.DeviceMetadata)
}

inline void DeviceMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stable_device_id_){}
    , decltype(_impl_.account_name_){}
    , decltype(_impl_.device_name_){}
    , decltype(_impl_.icon_url_){}
    , decltype(_impl_.bluetooth_mac_address_){}
    , decltype(_impl_.device_type_){0}
  };
  _impl_.stable_device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stable_device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.icon_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.icon_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bluetooth_mac_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bluetooth_mac_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceMetadata::~DeviceMetadata() {
  // @@protoc_insertion_point(destructor:nearby.internal.DeviceMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stable_device_id_.Destroy();
  _impl_.account_name_.Destroy();
  _impl_.device_name_.Destroy();
  _impl_.icon_url_.Destroy();
  _impl_.bluetooth_mac_address_.Destroy();
}

void DeviceMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.internal.DeviceMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stable_device_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.account_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.device_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.icon_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.bluetooth_mac_address_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.device_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string stable_device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stable_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "nearby.internal.DeviceMetadata.stable_device_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string account_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "nearby.internal.DeviceMetadata.account_name"));
        } else
          goto handle_unusual;
        continue;
      // optional string device_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "nearby.internal.DeviceMetadata.device_name"));
        } else
          goto handle_unusual;
        continue;
      // optional string icon_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_icon_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "nearby.internal.DeviceMetadata.icon_url"));
        } else
          goto handle_unusual;
        continue;
      // optional string bluetooth_mac_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bluetooth_mac_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "nearby.internal.DeviceMetadata.bluetooth_mac_address"));
        } else
          goto handle_unusual;
        continue;
      // optional .nearby.internal.DeviceMetadata.DeviceType device_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_device_type(static_cast<::nearby::internal::DeviceMetadata_DeviceType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.internal.DeviceMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string stable_device_id = 1;
  if (_internal_has_stable_device_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stable_device_id().data(), static_cast<int>(this->_internal_stable_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nearby.internal.DeviceMetadata.stable_device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stable_device_id(), target);
  }

  // optional string account_name = 2;
  if (_internal_has_account_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_name().data(), static_cast<int>(this->_internal_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nearby.internal.DeviceMetadata.account_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_name(), target);
  }

  // optional string device_name = 3;
  if (_internal_has_device_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nearby.internal.DeviceMetadata.device_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_name(), target);
  }

  // optional string icon_url = 4;
  if (_internal_has_icon_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon_url().data(), static_cast<int>(this->_internal_icon_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nearby.internal.DeviceMetadata.icon_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_icon_url(), target);
  }

  // optional string bluetooth_mac_address = 5;
  if (_internal_has_bluetooth_mac_address()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bluetooth_mac_address().data(), static_cast<int>(this->_internal_bluetooth_mac_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nearby.internal.DeviceMetadata.bluetooth_mac_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bluetooth_mac_address(), target);
  }

  // optional .nearby.internal.DeviceMetadata.DeviceType device_type = 6;
  if (_internal_has_device_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_device_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.internal.DeviceMetadata)
  return target;
}

size_t DeviceMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.internal.DeviceMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string stable_device_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stable_device_id());
    }

    // optional string account_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_name());
    }

    // optional string device_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_name());
    }

    // optional string icon_url = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon_url());
    }

    // optional string bluetooth_mac_address = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bluetooth_mac_address());
    }

    // optional .nearby.internal.DeviceMetadata.DeviceType device_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_device_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMetadata::GetClassData() const { return &_class_data_; }


void DeviceMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceMetadata*>(&to_msg);
  auto& from = static_cast<const DeviceMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.internal.DeviceMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stable_device_id(from._internal_stable_device_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_account_name(from._internal_account_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_device_name(from._internal_device_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_icon_url(from._internal_icon_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_bluetooth_mac_address(from._internal_bluetooth_mac_address());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.device_type_ = from._impl_.device_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceMetadata::CopyFrom(const DeviceMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.internal.DeviceMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMetadata::IsInitialized() const {
  return true;
}

void DeviceMetadata::InternalSwap(DeviceMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stable_device_id_, lhs_arena,
      &other->_impl_.stable_device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_name_, lhs_arena,
      &other->_impl_.account_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_name_, lhs_arena,
      &other->_impl_.device_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.icon_url_, lhs_arena,
      &other->_impl_.icon_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bluetooth_mac_address_, lhs_arena,
      &other->_impl_.bluetooth_mac_address_, rhs_arena
  );
  swap(_impl_.device_type_, other->_impl_.device_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2fproto_2fdevice_5fmetadata_2eproto_getter, &descriptor_table_internal_2fproto_2fdevice_5fmetadata_2eproto_once,
      file_level_metadata_internal_2fproto_2fdevice_5fmetadata_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nearby::internal::DeviceMetadata*
Arena::CreateMaybeMessage< ::nearby::internal::DeviceMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::internal::DeviceMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
